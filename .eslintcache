[{"C:\\Users\\Amine\\Documents\\Dev\\Projet\\covidtracker\\src\\index.js":"1","C:\\Users\\Amine\\Documents\\Dev\\Projet\\covidtracker\\src\\App.js":"2","C:\\Users\\Amine\\Documents\\Dev\\Projet\\covidtracker\\src\\components\\SelectList.js":"3","C:\\Users\\Amine\\Documents\\Dev\\Projet\\covidtracker\\src\\components\\index.js":"4","C:\\Users\\Amine\\Documents\\Dev\\Projet\\covidtracker\\src\\components\\Chart.js":"5","C:\\Users\\Amine\\Documents\\Dev\\Projet\\covidtracker\\src\\components\\Cards.js":"6","C:\\Users\\Amine\\Documents\\Dev\\Projet\\covidtracker\\src\\components\\Map.js":"7"},{"size":512,"mtime":1610717928723,"results":"8","hashOfConfig":"9"},{"size":4018,"mtime":1611166385205,"results":"10","hashOfConfig":"9"},{"size":916,"mtime":1610731192214,"results":"11","hashOfConfig":"9"},{"size":96,"mtime":1611160776850,"results":"12","hashOfConfig":"9"},{"size":2767,"mtime":1611162842259,"results":"13","hashOfConfig":"9"},{"size":1029,"mtime":1611166744438,"results":"14","hashOfConfig":"9"},{"size":2666,"mtime":1611160849550,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"6b64ml",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},"C:\\Users\\Amine\\Documents\\Dev\\Projet\\covidtracker\\src\\index.js",[],["32","33"],"C:\\Users\\Amine\\Documents\\Dev\\Projet\\covidtracker\\src\\App.js",[],"C:\\Users\\Amine\\Documents\\Dev\\Projet\\covidtracker\\src\\components\\SelectList.js",[],"C:\\Users\\Amine\\Documents\\Dev\\Projet\\covidtracker\\src\\components\\index.js",[],"C:\\Users\\Amine\\Documents\\Dev\\Projet\\covidtracker\\src\\components\\Chart.js",["34"],"C:\\Users\\Amine\\Documents\\Dev\\Projet\\covidtracker\\src\\components\\Cards.js",["35"],"C:\\Users\\Amine\\Documents\\Dev\\Projet\\covidtracker\\src\\components\\Map.js",["36"],"import React, { Component, Fragment } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport * as countryz from \"../country.json\";\r\n\r\nmapboxgl.accessToken =\r\n  \"pk.eyJ1IjoiYW1pbmVhYmRlbGxpIiwiYSI6ImNranU1ZWZzczJ6bjcyem1qZ25zb3UxbjYifQ.hbedsblNSZl7EnltQgLLkQ\";\r\n\r\nlet centroid;\r\nlet map, markers; // Bonne pratique ou non??????\r\n// let option = document.querySelectorAll(\".optionList\");\r\nexport default class Map extends Component {\r\n  state = {\r\n    lng: 2.3863,\r\n    lat: 47.261,\r\n    zoom: 4.5,\r\n    loading: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Création de la carte\r\n    map = new mapboxgl.Map({\r\n      container: this.mapContainer,\r\n      style: \"mapbox://styles/amineabdelli/ckjuc8dph019219o4mu8r4lth\",\r\n      center: [this.state.lng, this.state.lat],\r\n      zoom: this.state.zoom,\r\n    });\r\n    // Focus de la carte par défault\r\n    // map.on(\"move\", () => {\r\n    //   this.setState({\r\n    //     lng: map.getCenter().lng.toFixed(4),\r\n    //     lat: map.getCenter().lat.toFixed(4),\r\n    //     zoom: map.getZoom().toFixed(2),\r\n    //   });\r\n    // });\r\n\r\n    // Ajout des marqueurs par défaut au premier rendu\r\n    markers = Object.entries(this.props.dataTargeted).map(\r\n      ([key, value], index) => {\r\n        return new mapboxgl.Marker({\r\n          color: \"#FFFFFF\",\r\n          draggable: false,\r\n        })\r\n          .setLngLat([value.long, value.lat])\r\n          .addTo(map);\r\n      }\r\n    );\r\n  }\r\n\r\n  componentDidUpdate(/*prevProps, prevState, snapshot*/) {\r\n    // Suppresion anciens marqueurs\r\n    markers.forEach((marker) => marker.remove());\r\n\r\n    // Ajout des nouveaux marqueurs // Marqueurs OK\r\n    markers = Object.entries(this.props.dataTargeted).map(([key, value]) => {\r\n      centroid = value;\r\n      return new mapboxgl.Marker({\r\n        color: \"#FFFFFF\",\r\n        draggable: false,\r\n      })\r\n        .setLngLat([value.long, value.lat])\r\n        .addTo(map);\r\n    });\r\n\r\n    // fetch de country.json\r\n    Object.entries(countryz.default).map(([key, count]) => {\r\n      if (count.name === centroid.countryRegion) {\r\n        map.flyTo({\r\n          center: [count.long, count.lat],\r\n          zoom: 4,\r\n          essential: true,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        {this.myMap}\r\n        <div className=\".sideBar\">\r\n          Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom:{\" \"}\r\n          {this.state.zoom}\r\n        </div>\r\n        <div>\r\n          <div\r\n            ref={(el) => (this.mapContainer = el)}\r\n            className=\"mapContainer\"\r\n          />\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":2,"column":10,"nodeType":"43","messageId":"44","endLine":2,"endColumn":14},{"ruleId":"45","severity":1,"message":"46","line":14,"column":6,"nodeType":"47","endLine":14,"endColumn":8,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":66,"column":57,"nodeType":"51","messageId":"52","endLine":66,"endColumn":59},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'Line' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array. If 'setGlobalDataPC' needs the current value of 'data', you can also switch to useReducer instead of useState and read 'data' in the reducer.","ArrayExpression",["55"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},"Update the dependencies array to be: [data]",{"range":"58","text":"59"},[332,334],"[data]"]